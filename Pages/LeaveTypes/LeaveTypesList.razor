@page "/leave-types"

@inject ILeaveTypeService _leaveTypeService
@inject NavigationManager _navigation
@inject IToastService _toastService

<PageTitle>Leave Types</PageTitle>

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">Leave Types</h2>
        <button class="btn btn-primary" @onclick="NavigateToCreate">
            <i class="bi bi-plus-circle me-1"></i> Add Leave Type
        </button>
    </div>

<!-- Filters Section -->
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <div class="col-md-4">
                    <label class="form-label">Name</label>
                    <input type="text" class="form-control" placeholder="Filter by Name" @bind="FilterName" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Paid Status</label>
                    <select class="form-select" @bind="FilterIsPaid">
                        <option value="">All</option>
                        <option value="true">Paid</option>
                        <option value="false">Unpaid</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Status</label>
                    <select class="form-select" @bind="FilterIsActive">
                        <option value="">All</option>
                        <option value="true">Active</option>
                        <option value="false">Inactive</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-primary w-100" @onclick="LoadLeaveTypes">
                        <i class="bi bi-search"></i> Search
                    </button>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-secondary w-100" @onclick="ClearFilters">
                        <i class="bi bi-x-circle"></i> Clear
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Leave Types Table -->
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
            <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
            <span class="ms-2">Loading leave types...</span>
        </div>
    }

    else if (!LeaveTypes.Any())
    {
        <div class="alert alert-warning">No leave types found.</div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered align-middle shadow-sm">
                <thead class="table-light">
                    <tr>
                        <th>#</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th class="text-center">Paid</th>
                        <th class="text-center">Status</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (type, index) in LeaveTypes.Select((val, i) => (val, i)))
                    {
                        <tr @key="type.Id">
                            <td>@(index + 1)</td>
                            <td>@type.Name</td>
                            <td>@type.Description</td>
                            <td class="text-center">
                                <span class="badge bg-@(type.IsPaid ? "success" : "secondary")">
                                    @(type.IsPaid ? "Yes" : "No")
                                </span>
                            </td>
                            <td class="text-center">
                                <span class="badge bg-@(type.IsActive ? "success" : "danger")">
                                    @(type.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td class="text-center">
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => ShowLeaveTypeDetails(type)">
                                        <i class="bi bi-eye"></i> View
                                    </button>
                                    <a class="btn btn-sm btn-outline-primary" href="@($"/leave-types/edit/{type.Id}")">
                                        <i class="bi bi-pencil"></i> Edit
                                    </a>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeletePrompt(type)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Modals -->
@if (ShowDetailsModal && SelectedLeaveType != null)
{
    <GenericViewModal 
        Title="Leave Type Details"
        Fields="GetLeaveTypeDetailFields(SelectedLeaveType)"
        OnClose="CloseDetailsModal" />
}

@if (ShowDeleteModal && SelectedLeaveTypeToDelete != null)
{
    <DeleteConfirmation TItem="HRP_LeaveType"
                        Item="SelectedLeaveTypeToDelete"
                        ItemName="@SelectedLeaveTypeToDelete.Name"
                        OnConfirm="DeleteLeaveTypeAsync"
                        OnCancel="CancelDelete" />
}

@code {
    // Data & State
    private List<HRP_LeaveType> LeaveTypes { get; set; } = new();
    private HRP_LeaveType? SelectedLeaveType { get; set; }
    private HRP_LeaveType? SelectedLeaveTypeToDelete { get; set; }

    // UI States
    private bool IsLoading { get; set; } = true;
    private bool ShowDetailsModal { get; set; } = false;
    private bool ShowDeleteModal { get; set; } = false;

    // Filters
    private string? FilterName { get; set; }
    private string? FilterIsPaid { get; set; }
    private string? FilterIsActive { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadLeaveTypes();
    }

    private async Task LoadLeaveTypes()
    {
        IsLoading = true;

        try
        {
            LeaveTypes = await _leaveTypeService.FilterAsync(FilterName, FilterIsPaid, FilterIsActive);
        }
        catch (Exception ex)
        {
            _toastService.ShowError("Failed to load leave types.");
            Console.Error.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ClearFilters()
    {
        FilterName = null;
        FilterIsPaid = null;
        FilterIsActive = null;
        _ = LoadLeaveTypes();
        IsLoading = false;
        LeaveTypes.Clear();
    }

    private void NavigateToCreate() => _navigation.NavigateTo("/leave-types/create");

    private void ShowLeaveTypeDetails(HRP_LeaveType type)
    {
        SelectedLeaveType = type;
        ShowDetailsModal = true;
    }

    private void CloseDetailsModal()
    {
        SelectedLeaveType = null;
        ShowDetailsModal = false;
    }

    private void ConfirmDeletePrompt(HRP_LeaveType type)
    {
        SelectedLeaveTypeToDelete = type;
        ShowDeleteModal = true;
    }

    private void CancelDelete()
    {
        SelectedLeaveTypeToDelete = null;
        ShowDeleteModal = false;
    }

    private async Task DeleteLeaveTypeAsync()
    {
        if (SelectedLeaveTypeToDelete != null)
        {
            try
            {
                await _leaveTypeService.DeleteAsync(SelectedLeaveTypeToDelete.Id);
            }
            catch (Exception ex)
            {
                _toastService.ShowError("Error deleting leave type.");
                Console.Error.WriteLine(ex.Message);
            }
            await LoadLeaveTypes();
            CancelDelete();
        }
    }

    private List<(string Label, string Value)> GetLeaveTypeDetailFields(HRP_LeaveType type) => new()
    {
        ("Name", type.Name),
        ("Description", type.Description),
        ("Paid Leave", type.IsPaid ? "Yes" : "No"),
        ("Status", type.IsActive ? "Active" : "Inactive"),
    };
}
